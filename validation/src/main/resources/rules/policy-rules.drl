package rules;

import java.util.List;
import org.example.validation.semantic_validation.model.Policy;
import org.example.validation.semantic_validation.model.PolicyValidation;
import org.example.validation.semantic_validation.model.Permission;
import org.example.validation.semantic_validation.model.Constraint;
import org.example.validation.semantic_validation.model.Duty;
import org.example.validation.semantic_validation.model.Prohibition;
import org.example.validation.semantic_validation.model.Rule;
import function org.example.validation.semantic_validation.SemanticValidatorHelper.isSupportedLocale;
import function org.example.validation.semantic_validation.SemanticValidatorHelper.areDatesTimesValid;
import function org.example.validation.semantic_validation.SemanticValidatorHelper.isValueGreaterThenZero;

rule "MembershipPolicy validation: Membership in duty"
when
    PolicyValidation( $policy : policy, $errors : errors )
    Policy( $duties : duties ) from $policy
    Rule( $constraints : constraints ) from $duties
    Constraint( leftOperand == "Membership" ) from $constraints
then
    $errors.add("Membership must not appear in duty");
end

rule "MembershipPolicy validation: Membership in prohibition"
when
    PolicyValidation( $policy : policy, $errors : errors )
    Policy( $prohibitions : prohibitions ) from $policy
    Rule( $constraints : constraints ) from $prohibitions
    Constraint( leftOperand == "Membership" ) from $constraints
then
    $errors.add("Membership must not appear in prohibition");
end

rule "MembershipPolicy validation: Membership is not ACTIVE"
when
    PolicyValidation( $policy : policy, $errors : errors )
    Policy( $permissions : permissions ) from $policy
    Rule( $constraints : constraints ) from $permissions
    Constraint( leftOperand == "Membership" && !rightOperand.equals("ACTIVE") ) from $constraints
then
    $errors.add("Membership rightOperand must be ACTIVE");
end

rule "LocationPolicy Validation: unsupported Location"
when
    PolicyValidation( $policy : policy, $errors : errors )
    Policy( $permissions : permissions) from $policy
    Rule( $dutyConstraints : constraints ) from $permissions
    Constraint( leftOperand == "Location" && !isSupportedLocale(rightOperand) ) from $dutyConstraints
then
    $errors.add("LocationPolicy: Location must be a valid ISO country code");
end

rule "LocationPolicy Validation: in prohibition"
when
    PolicyValidation( $policy : policy, $errors : errors )
    Policy( $prohibitions : prohibitions ) from $policy
    Rule( $dutyConstraints : constraints ) from $prohibitions
    Constraint( leftOperand == "Location" && !isSupportedLocale(rightOperand) ) from $dutyConstraints
then
    $errors.add("LocationPolicy: Location must be a valid ISO country code");
end

rule "LocationPolicy Validation in duty"
when
    PolicyValidation( $policy : policy, $errors : errors )
    Policy( $duties : duties ) from $policy
    Rule( $dutyConstraints : constraints ) from $duties
    Constraint( leftOperand == "Location") from $dutyConstraints
then
    $errors.add("LocationPolicy: Location must not be in duty");
end

rule "CountPolicy validation: non-positive count"
when
    PolicyValidation( $policy : policy, $errors : errors )
    Policy( $permissions : permissions ) from $policy
    Rule( $constraints : constraints ) from $permissions
    Constraint( leftOperand == "NumberOfTransfers" && !isValueGreaterThenZero(rightOperand) ) from $constraints
then
    $errors.add("CountPolicy: NumberOfTransfers must be a positive integer");
end

rule "CountPolicy Validation: wrong operator"
when
    PolicyValidation( $policy : policy, $errors : errors )
    Policy( $permissions : permissions ) from $policy
    Rule( $constraints : constraints ) from $permissions
    Constraint( leftOperand == "NumberOfTransfers" && !operator.matches("(lt|lteq)") ) from $constraints
then
    $errors.add("CountPolicy: NumberOfTransfers must be less than or equal to");
end

rule "TimeFramePolicy validation: start date after end date"
when
    PolicyValidation( $policy : policy, $errors : errors )
    Policy( !areDatesTimesValid(prohibitions, permissions, duties) ) from $policy
then
    $errors.add("TimeFramePolicy: Start date must be before end date");
end

rule "TimeFramePolicy Validation: rightoperand matches regex"
when
    PolicyValidation( $policy : policy, $errors : errors )
    Policy( $permissions : permissions ) from $policy
    Rule( $constraints : constraints ) from $permissions
    Constraint( leftOperand.equals("DateTime") && !rightOperand.matches("^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z") ) from $constraints
then
    $errors.add("TimeFramePolicy: Right operand must be a date in ISO 8601 format");
end

rule "BillingPolicy Validation: must be positive"
when
    PolicyValidation( $policy : policy, $errors : errors )
        Policy( $duties : duties ) from $policy
        Rule( $constraints : constraints ) from $duties
        Constraint( leftOperand.equals("payment") && !isValueGreaterThenZero(rightOperand) ) from $constraints
then
    $errors.add("BillingPolicy: Payment must be a positive number");
end

rule "BillingPolicy: payment must only appear in duty"
when
    PolicyValidation( $policy : policy, $errors : errors )
    Policy( $permissions : permissions ) from $policy
    Rule( $constraints : constraints ) from $permissions
    Constraint( leftOperand == "payment" ) from $constraints
then
    $errors.add("BillingPolicy: Payment must appear in duty");
end

rule "BillingPolicy: payment must only appear in duty not in prohibition"
when
    PolicyValidation( $policy : policy, $errors : errors )
    Policy( $prohibitions : prohibitions ) from $policy
    Rule( $constraints : constraints ) from $prohibitions
    Constraint( leftOperand == "payment" ) from $constraints
then
    $errors.add("BillingPolicy: Payment must appear in duty");
end